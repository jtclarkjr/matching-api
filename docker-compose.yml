services:
  # Redis service for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: matching-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - matching-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: matching-api-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - matching-network

  # Matching API application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: matching-api-app
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSLMODE: disable
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET}
      
      # AWS S3 configuration (optional)
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      
      # Application configuration
      PORT: ${PORT}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - matching-network

  # Redis Commander (optional - for Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: matching-api-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools
    networks:
      - matching-network

  # pgAdmin (optional - for PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: matching-api-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools
    networks:
      - matching-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  matching-network:
    driver: bridge